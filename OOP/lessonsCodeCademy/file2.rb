=begin

Область применения
Другим важным аспектом классов Ruby является область видимости. Область видимости переменной - это контекст,
в котором она видна программе.

Возможно, вас удивит тот факт, что не все переменные доступны всем частям программы на языке Ruby в любой момент времени.
При работе с классами можно иметь переменные, которые доступны везде (глобальные переменные), которые доступны только
внутри определенных методов (локальные переменные), которые являются членами определенного класса (переменные класса),
и переменные, которые доступны только конкретным экземплярам класса (переменные экземпляра).

То же самое относится и к методам: некоторые из них доступны везде, некоторые - только членам определенного класса,
а некоторые - только конкретным объектам экземпляра.


Ниже код в редакторе. Некоторые переменные начинаются с $, @ или @@ - Это позволяет обозначить их
как глобальные, экземпляры и переменные класса (соответственно). Мы разберемся в этом далее. Пока запстим код,
чтобы увидеть, как работают эти различные переменные!

=end

class Computer
  $manufacturer = "Mango Computer, Inc."
  @@files = {hello: "Hello, world!"}
  
  def initialize(username, password)
    @username = username
    @password = password
  end
  
  def current_user
    @username
  end
  
  def self.display_files
    @@files
  end
end

# Make a new Computer instance:
hal = Computer.new("Dave", 12345)

puts "Current user: #{hal.current_user}"
# @username belongs to the hal instance.

puts "Manufacturer: #{$manufacturer}"
# $manufacturer is global! We can get it directly.

puts "Files: #{Computer.display_files}"
# @@files belongs to the Computer class.

puts '-' * 100

=begin
Именование переменных
Напомним, что переменные экземпляра начинаются с символа @. Это не просто обычай Ruby - это часть синтаксиса!
Всегда начинайте переменные экземпляра с @.

Переменные класса похожи на переменные экземпляра, но вместо того, чтобы принадлежать экземпляру класса, они принадлежат
самому классу. Переменные класса всегда начинаются с двух @, например, так: @@files.

Глобальные переменные могут быть объявлены двумя способами. Первый - это уже знакомый вам способ: вы просто определяете
переменную вне какого-либо метода или класса, и вуаля! Она стала глобальной. Если вы хотите сделать переменную глобальной
внутри метода или класса, просто начните ее с символа $, например, так: $matz.

Более подробно мы рассмотрим переменные экземпляра и класса в ближайшее время. Сначала сделаем краткий обзор локальной
и глобальной областей видимости.

=end

class MyClass
  $my_variable = "Hello!"
end

puts $my_variable

=begin

Например...
Хорошо! Однако следует сделать оговорку: глобальные переменные могут быть изменены из любой точки программы, и это,
как правило, не очень хорошая идея. Гораздо лучше создавать переменные с ограниченной областью действия,
которые можно изменять только из нескольких мест!

Например, переменные экземпляра принадлежат конкретному объекту (или "экземпляру"). Давайте потренируемся в работе
с переменными экземпляра! Мы добавили в редактор наш предыдущий класс Person.


В два раза больше @, в два раза лучше
Мы можем создавать переменные класса, начиная имя переменной с двух символов @. Переменные класса привязываются к целым
классам, а не только к их экземплярам, например, так:

class MyClass
  @@class_variable
end

=end

class Person
  def initialize(name, age, profession)
    @name = name
    @age = age
    @profession = profession
  end
end

puts '-------------------------------------------------'

=begin
Поскольку для всех экземпляров класса существует только одна копия переменной класса, мы можем использовать их для
выполнения некоторых интересных трюков в Ruby. Например, с помощью переменной класса можно отслеживать количество
созданных экземпляров класса. Давайте сделаем это прямо сейчас:

Давайте сделаем три вещи:

Создадим переменную класса @@people_count в строке 3 и установим ее равной 0.
Увеличим @@people_count в строке 8.
Вернем @@people_count в строке 13, чтобы наш puts в строке 20 вывел количество созданных на данный момент людей.
=end

class Person2
  # Set your class variable to 0 on line 3
  @@people_count = 0
  
  def initialize(name)
    @name = name
    # Increment your class variable on line 8
    @@people_count += 1
  end
  
  def self.number_of_instances
    # Return your class variable on line 13
    @@people_count
  end
end

matz = Person2.new("Yukihiro")
dhh = Person2.new("David")
denis = Person2.new('Denis')
katy = Person2.new('Katy')

puts "Number of Person instances: #{Person2.number_of_instances}"