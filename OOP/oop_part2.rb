=begin
новички в ООП обычно довольно легко понимают концепцию класс-объект на примере одного класса с методами,
которые вызываются на объекте
к примеру напишем простой класс Car:
=end

class Car

  attr_accessor :color

  def initialize(number)
    @number = number
    @color = 'white'
  end

  def beep
    puts 'beep beep'
  end

  # def color=(color)
    # @color = color
  # end

  # def color
    # @color
  # end
end

# класс загружен, объект создан, метод вызван у объекта, результат совпадает с ожиданиями… отлично!

# car = Car.new
# car.beep

# initialize method

=begin
также обычно не вызывает сложностей в понимании и некоторое усложнение класса
например:
в классе может быть метод initialize, который принимает аргументы и присваивает их значения инстанс-переменным
теперь при инициализации объекта мы должны передать в аргументах метода .new номер и мы можем увидеть в irb,
что этот номер присвоен соответствующей переменной объекта класса Car
=end

car = Car.new(101)
car.beep
p car
car.color = 'red'
p car.color

=begin
adding getter and setter
можно добавить еще один аттрибут и пару геттер-сеттер к нему
можно даже устанавливать в методе initialize значение по умолчанию для этого нового аттрибута
пусть автомобиль имеет аттрибут “цвет” и пусть при создании нового автомобиля его цвет устанавливается в значение “белый”
при этом у автомобиля есть методы, с попощью которых можно узнать цвет или поменять его (как в примере ниже):
=end

=begin
геттер и сеттер, чтобы не быть многословными можно переписать с помощью встроенного метода Руби:
=end

# methods accepting arguments

