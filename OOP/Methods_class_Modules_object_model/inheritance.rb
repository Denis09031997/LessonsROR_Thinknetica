=begin
Наследование - это способность одного класса быть дочерним по отношению к другому классу и,
следовательно, наследовать все его характеристики, включая методы и переменные. Мы уже видели это
на примере использования метода ::superclass для просмотра того, от какого класса наследует тот или иной класс,
например, число 1 является классом FixNum, который наследует от Integer, который наследует от Numeric,
который наследует от Object, который наследует от BasicObject.

=end

p 1.class.superclass.superclass.superclass
p 1.class.superclass.superclass
p 1.class.superclass
p 1.class

=begin
Зачем нужно все это наследование? Для того чтобы наш код был как можно более "чистым". Это позволяет нам не повторять
кучу методов (скажем, #to_s, который реализован в классе Object) для каждого подкласса.

В Ruby класс наследуется от другого класса с помощью нотации <. В отличие от некоторых других языков, класс может
иметь только ОДНОГО родителя.
=end

# class Viking < Person
# Теперь Viking имеет доступ ко всем методам Person. Вы говорите, что Viking расширяет Person.

=begin
Вы уже видели, как мы добавляем методы в другой существующий класс, как это было несколько раз с Array,
когда вы создавали собственную реализацию #each и #map. Этот же прием можно использовать для перезаписи
существующих методов. Здесь это вызовет всевозможные проблемы, но мы можем это сделать:

=end

class Array
  def each
    puts 'HAHA no each here!'
  end
end

[1, 2, 3].each { |i|  puts i }

# Если Viking расширяет Person, то у вас аналогично есть возможность перезаписать любой из методов Person.
# Возможно, викинги исцеляются в два раза быстрее обычных людей. Вы можете написать:

class Person
  MAX_HEALTH = 120
  ...
  def heal
    self.health += 1 unless self.health + 1 > MAX_HEALTH
  end
end

class Viking < Person
  def heal
    self.health = [self.health + 2, MAX_HEALTH].min
    puts "Ready for battle!"
  end
end

# Это один из способов... но мы также можем сделать это, вызвав родительский метод 
# heal напрямую несколько раз с помощью специального метода #super. 
# super позволяет вызвать версию текущего метода суперкласса.

class Viking < Person
  ...
  def heal
      2.times { super }
      puts "Ready for battle!"
  end
end

=begin
Вы часто будете использовать этот метод в своем методе #initialize, когда хотите использовать родительский
#initialize, но при этом добавить пару собственных изменений. При необходимости можно передавать параметры:

=end

class Viking < Person
  def initialize(name, health, age, strength, weapon)
    super(name, health, age, strength)
    @weapon = weapon
  end
end

