**Конспект и шпаргалка по теме "Регулярные выражения в Ruby":**

**1. Определение регулярного выражения (Regexp):**
   - Регулярные выражения представляют собой шаблоны для поиска и сопоставления строк.
   - Синтаксис: `/pattern/`, где `pattern` - шаблон.

**2. Примеры использования:**

   ```ruby
   # Поиск слова "apple" в строке
   /apple/.match("I love apples") # Возвращает объект MatchData

   # Поиск слова "apple" в строке (альтернативный синтаксис)
   "I love apples" =~ /apple/ # Возвращает индекс первого совпадения или nil

   # Проверка наличия слова "ruby" в строке
   "Hello, Ruby!" =~ /ruby/i # Игнорирование регистра букв (флаг 'i')
   ```

**3. Квантификаторы:**

   - `*`: Ноль или более повторений (например, `\w*` соответствует любой последовательности букв).
   - `+`: Одно или более повторений.
   - `?`: Ноль или одно повторение.
   - `{n}`: Ровно n повторений.
   - `{n,}`: Не менее n повторений.
   - `{n,m}`: От n до m повторений.

**4. Метасимволы:**

   - `.`: Любой символ (кроме новой строки).
   - `\w`: Буквенный символ (буквы, цифры, подчеркивание).
   - `\d`: Цифровой символ.
   - `\s`: Пробельный символ.
   - `^`: Начало строки.
   - `$`: Конец строки.

**5. Примеры сопоставления строк:**

   ```ruby
   # Проверка, что строка начинается с "Hello"
   puts "Hello, world!".match(/^Hello/) # Вернет объект MatchData

   # Проверка, что строка состоит из ровно четырех букв
   puts "abcd".match(/^\w{4}$/) # Вернет объект MatchData

   # Проверка, что строка содержит слово "cool"
   puts "Regex are cool".match(/\w{4}/) # Вернет объект MatchData
   ```

**6. Флаги:**

   - `i`: Игнорирование регистра букв (case-insensitive).

**7. Работа с объектом MatchData:**

   - Объект MatchData содержит результаты сопоставления и предоставляет доступ к захваченным группам.

   ```ruby
   match_data = /(\d+)-(\d+)/.match("201-456")
   puts match_data[0] # Весь результат сопоставления (201-456)
   puts match_data[1] # Первая захваченная группа (201)
   puts match_data[2] # Вторая захваченная группа (456)
   ```

**Примеры кода:**

```ruby
# Выводит первую последовательность букв, состоящую из четырех символов
puts "Regex are cool".match /\w{4}/ # Вывод: "Reg"

# Выводит nil, так как строка не начинается с "Hello"
puts "Regex are cool".match /^Hello/ # Вывод: nil
```

**Описание кода:**

1. **puts "Regex are cool".match /\w{4}/:**
   - Выводит первую последовательность букв, состоящую из четырех символов (в данном случае, "Reg").

2. **puts "Regex are cool".match /^\w{4}$/:**
   - Выводит nil, так как строка не начинается с "Hello".

`MatchData` в Ruby представляет собой объект, который содержит результаты сопоставления регулярного выражения с 
строкой. Когда строка соответствует регулярному выражению, `MatchData` содержит информацию о совпадениях, 
найденных в строке.

Когда вы используете метод `match` для строки с регулярным выражением, он возвращает объект `MatchData`, 
который содержит информацию о сопоставлении. Этот объект можно использовать для получения деталей о найденных 
совпадениях, таких как подстроки, начальные и конечные позиции и т.д.

Пример:

```ruby
# Создаем регулярное выражение для поиска слова из четырех букв
regex = /\b\w{4}\b/

# Создаем строку для сопоставления
string = "Ruby is a cool language."

# Применяем регулярное выражение к строке
match_data = string.match(regex)

# Выводим результаты сопоставления
puts "Совпадение найдено: #{match_data[0]}" # Выведет "Ruby"
```

В данном примере `match_data` содержит информацию о том, что найдено совпадение с регулярным выражением. 
Вы можете использовать индексы для доступа к различным группам совпадений (если они были определены в регулярном 
выражении).

