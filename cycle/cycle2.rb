=begin
В Ruby существует несколько видов циклов, которые позволяют выполнять повторяющиеся действия в программе. 
Рассмотрим основные типы циклов и примеры их использования.
=end

# while - выполняет код, пока указанное условие остается истинным

counter = 1

while counter <= 5 do
  puts "Счетчик: #{counter}"
  counter += 1 
end

puts '--------------------------------------------'
# Цикл for позволяет итерироваться по заданному диапазону или коллекции элементов.

for i in 1..10 do
  puts "Значение i = #{i}"
end
puts '--------------------------------------------'
# Цикл each применяется к коллекциям (массивам, хэшам и т.д.) для выполнения кода для каждого элемента.

fruits = ['apple', 'banana', 'lymon']
puts '--------------------------------------------'
fruits.each do |fruit|
  puts "Фрукт = #{fruit}"
end

puts '--------------------------------------------'

# Цикл times выполняет код определенное количество раз.

5.times do
  puts 'Hello, Denis!'
end

# Цикл until выполняет код, пока указанное условие не станет истинным.
puts '--------------------------'
counter2 = 1

until counter2 > 5 do
  puts 'Да, пока это не так'
  counter2 += 1
end

# Цикл loop выполняет код бесконечное количество раз, пока не будет явно прерван.
puts '---------------------------------'
counter3 = 1

loop do
  puts "Счетчик #{counter3}"
  counter3 += 1
  break if counter3 > 5
end

=begin
Выбор подходящего цикла зависит от задачи. Если заранее известно количество итераций, лучше использовать times или
for. Если нужно итерироваться по коллекции, each – отличный выбор. while, until и loop удобны, когда условие 
зависит от какой-то логики.
=end

